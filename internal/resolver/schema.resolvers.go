package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"log/slog"

	"github.com/otakakot/sample-go-gqlgen/internal/domain"
	graphql1 "github.com/otakakot/sample-go-gqlgen/pkg/graphql"
	"github.com/otakakot/sample-go-gqlgen/pkg/graphql/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodoInput) (*model.Todo, error) {
	slog.InfoContext(ctx, "CreateTodo")

	uid := domain.CtxValUserID(ctx)

	todo := &model.Todo{
		ID:   fmt.Sprintf("T%d", len(r.todo)+1),
		Text: input.Text,
		Done: false,
		User: &model.User{
			ID:   uid,
			Name: uid,
		},
	}

	r.todo = append(r.todo, todo)

	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todo, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
